(function(global,factory){'object'==typeof exports&&'undefined'!=typeof module?module.exports=factory():'function'==typeof define&&define.amd?define('faux',factory):global.faux=factory()})(this,function(){'use strict';function normalize(path){if(!path)return'.';let isAbsolute=!1;0===path.indexOf('/')&&(isAbsolute=!0);const significant=(path.match(/[^/]+/g)||[]).filter(name=>'.'!==name).reduce((pathArray,name)=>'..'===name&&pathArray.length&&'..'!==pathArray[pathArray.length-1]?pathArray.slice(0,-1):[...pathArray,name],[]);return isAbsolute?'/'+significant.join('/'):significant.join('/')}function getMode(mode='r'){return{r:{read:!0,write:!1,truncate:!1,create:!1,append:!1},"r+":{read:!0,write:!0,truncate:!1,create:!1,append:!1},w:{read:!1,write:!0,truncate:!0,create:!0,append:!1},"w+":{read:!0,write:!0,truncate:!0,create:!0,append:!1},a:{read:!1,write:!0,truncate:!1,create:!0,append:!0},"a+":{read:!0,write:!0,truncate:!1,create:!0,append:!0}}[mode]}function resolvePath(inputPath,process){return'/'===inputPath[0]?inputPath:process.currentDirectory+'/'+inputPath}function fail(process,id,reason){history[id].call+=` -> Fail: "${reason.toString()}"`,process.worker.postMessage({status:'error',reason:reason.toString(),id})}function pass(process,id,result){history[id].call+=` -> Pass: ${JSON.stringify(result,null,2)}`,process.worker.postMessage({status:'success',result,id})}const Ok=x=>({map:f=>Ok(f(x)),chain:f=>f(x),chainOk:f=>f(x),chainErr:()=>Ok(x),fold:()=>pass=>pass(x),toString:()=>`Ok(${x})`}),Err$1=x=>({map:()=>Err$1(x),chain:()=>Err$1(x),chainOk:()=>Err$1(x),chainErr:f=>f(x),fold:fail=>()=>fail(x),toString:()=>`Err(${x})`}),propR=name=>obj=>name in obj?Ok(obj[name]):Err$1(`${name} not in ${JSON.stringify(obj)}`),Task=run=>({run,map:f=>Task(err=>res=>run(err)(x=>res(f(x)))),runMap:f=>Task(err=>res=>run(err)(x=>f(x).run(err)(res))),log:()=>run(console.error)(console.log)});class Inode{constructor(config={}){this.file=!1,this.directory=!1,this.children=void 0,this.executable=!1,this.raw=void 0,Object.assign(this,config)}readFile(){return this.file?Ok(this.raw):Err$1('Not a file')}writeFile(contents){return this.file?Ok(this.raw=contents):Err$1('Not a file')}appendFile(contents){return this.file?Ok(this.raw+=contents):Err$1('Not a file')}truncateFile(){return this.file?Ok(this.raw=''):Err$1('Not a file')}readDirectory(){return this.children?Ok(Object.keys(this.children)):Err$1('Not a directory')}}class OFS{constructor(){this.inodes=[new Inode({children:{},directory:!0})]}resolve(pathArray){return pathArray.reduce((previousInode,name)=>previousInode.chain(propR('children')).chain(propR(name)),Ok(this.inodes[0]))}addInode(pathArray,inode){const parent=pathArray.slice(0,-1),name=pathArray.slice(-1)[0];return name.match('/')?Err$1('Name can\'t contain forward slashes'):this.resolve(parent).chain(propR('children')).chain(children=>children[name]=inode)}createFile(pathArray){const inode=new Inode({contents:''});return this.addInode(pathArray,inode)}createDirectory(pathArray){const inode=new Inode({children:{},directory:!0});return this.addInode(pathArray,inode)}remove(pathArray){const parent=pathArray.slice(0,-1),name=pathArray.slice(-1)[0];return this.resolve(parent).chain(propR('children')).chain(children=>delete children[name])}}class Inode$1{constructor(config={}){this.file=!0,this.directory=!0,this.executable=!1,this.raw=void 0,Object.assign(this,config)}get children(){return Array.from(this.raw.children).flatMap((child,i)=>{const name=child.localName,id=child.id?'#'+child.id:'',classes=child.className?'.'+child.className.replace(/\s+/g,'.'):'';return[name+id+classes,i+1]})}readFile(){return Ok(this.raw.innerHTML)}writeFile(contents){return Ok(this.raw.innerHTML=contents)}appendFile(contents){return Ok(this.raw.innerHTML+=contents)}truncateFile(){return Ok(this.raw.innerHTML='')}readDirectory(){return Ok(Object.keys(this.children))}}const chop=path=>normalize(path).match(/[^/]+/g)||[];var FileDescriptor=(path,modeString)=>{const mode=getMode(modeString),normalized=normalize(path),inode=fs.resolve(normalized).chainErr(e=>{mode.create?fs.createFile(normalized):Err$1(e)});return mode.truncate?inode.map(n=>n.truncateFile()):null,{mode,path:normalized,inode,readFile:()=>mode.read?inode.map(n=>n.readFile()):Err$1('Read mode unset'),writeFile:contents=>mode.write?mode.append?inode.map(n=>n.appendFile(contents)):inode.map(n=>n.writeFile(contents)):Err$1('Write mode unset'),readDirectory:()=>inode.map(n=>n.readDirectory())}},history={},sys=Object.freeze({spawn:function(process,msgID,[image,argv]){if('string'!=typeof image)return fail(process,msgID,'First argument - image - should be a string');if(!argv instanceof Array)return fail(process,msgID,'Second argument - argv - should be an array');const newProcess=new Process(image,argv),pid=processTable.add(newProcess);return pass(process,msgID,pid)},exec:function(process,msgID,[inputPath,argv]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');if(!argv instanceof Array)return fail(process,msgID,'Second argument - argv - should be an array');const safePath=resolvePath(inputPath,process);return fs.resolve(safePath).chain(propR('raw')).map(image=>processTable.add(new Process(image,argv))).fold(e=>fail(process,msgID,e))(pid=>pass(process,msgID,pid))},exit:function(process,msgID){return pass(process,msgID,process.worker.terminate())},exists:function(process,msgID,[inputPath]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');const safePath=resolvePath(inputPath,process);return pass(process,msgID,process.exists(safePath))},stat:function(process,msgID,[inputPath]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');const safePath=resolvePath(inputPath,process);return fs.resolve(safePath).fold(e=>fail(process,msgID,e))(inode=>pass(process,msgID,{file:inode.file,executable:inode.executable,directory:inode.directory}))},open:function(process,msgID,[inputPath,mode]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');if('string'!=typeof mode)return fail(process,msgID,'Second argument - mode - should be a string');const safePath=resolvePath(inputPath,process);return process.open(safePath,mode).fold(e=>fail(process,msgID,e))(fd=>pass(process,msgID,fd))},close:function(process,msgID,[fd]){return 0>fd?fail(process,msgID,'File Descriptor should be >= 0'):process.fds[fd]?process.close(fd).fold(e=>fail(process,msgID,e))(r=>pass(process,msgID,r)):fail(process,msgID,'File Descriptor must exist')},dup:function(process,msgID,[fd]){return 0>fd?fail(process,msgID,'File Descriptor should be >= 0'):process.fds[fd]?process.dup(fd).fold(e=>fail(process,msgID,e))(fd=>pass(process,msgID,fd)):fail(process,msgID,'File Descriptor must exist')},dup2:function(process,msgID,[fd1,fd2]){return 0>fd1?fail(process,msgID,'File Descriptor 1 should be >= 0'):process.fds[fd1]?0>fd2?fail(process,msgID,'File Descriptor 2 should be >= 0'):process.dup2(fd1,fd2).fold(e=>fail(process,msgID,e))(fd=>pass(process,msgID,fd)):fail(process,msgID,'File Descriptor 1 must exist')},readFile:function(process,msgID,[fd]){return 0>fd?fail(process,msgID,'File Descriptor should be >= 0'):process.fds[fd].readFile().fold(e=>fail(process,msgID,e))(data=>pass(process,msgID,data))},readDirectory:function(process,msgID,[fd]){return 0>fd?fail(process,msgID,'File Descriptor should be >= 0'):process.fds[fd].readDirectory().fold(e=>fail(process,msgID,e))(children=>pass(process,msgID,children))},writeFile:function(process,msgID,[fd,data]){return 0>fd?fail(process,msgID,'File Descriptor should be >= 0'):'string'==typeof data?process.fds[fd].writeFile(data).fold(e=>fail(process,msgID,e))(r=>pass(process,msgID,r)):fail(process,msgID,'Second argument - data - should be a string')},createDirectory:function(process,msgID,[inputPath]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');const safePath=resolvePath(inputPath,process);fs.createDirectory(safePath).fold(e=>fail(process,msgID,e))(r=>pass(process,msgID,r))},remove:function(process,msgID,[inputPath]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');const safePath=resolvePath(inputPath,process);fs.remove(safePath).fold(e=>fail(process,msgID,e))(r=>pass(process,msgID,r))},currentDirectory:function(process,msgID){return pass(process,msgID,process.currentDirectory)},changeDirectory:function(process,msgID,[inputPath]){if('string'!=typeof inputPath)return fail(process,msgID,'First argument - path - should be a string');const safePath=resolvePath(inputPath,process),result=process.currentDirectory=safePath;return pass(process,msgID,result)},getenv:function(process,msgID,[key]){if(key){if('string'!=typeof key)return fail(process,msgID,'First argument - key - should be a string (or a falsey value)');const value=process.env[key];return pass(process,msgID,value)}return pass(process,msgID,process.env)},setenv:function(process,msgID,[key,value]){if('string'!=typeof key)return fail(process,msgID,'First argument - key - should be a string');if('string'!=typeof value)return fail(process,msgID,'Second argument - value - should be a string');const result=process.env[key]=value;return pass(process,msgID,result)}});const spawnWorker=script=>{const blob=new Blob([script],{type:'application/javascript'}),uri=URL.createObjectURL(blob);return new Worker(uri)};var utils=Object.freeze({genUUID:function(){return'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,char=>{const randFloat=16*Math.random(),randInt=parseInt(randFloat);return'x'===char?randInt.toString(16):(8|3&randInt).toString(16)})},spawnWorker:spawnWorker,openLocalFile:(readAs='readAsText')=>{const input=document.createElement('input');return input.type='file',input.click(),Task(()=>res=>{input.onchange=()=>{const file=input.files[0],reader=new FileReader;reader[readAs](file),reader.onloadend=()=>res(reader.result)}})},http:(uri,method='GET')=>Task(err=>res=>{const xhr=new XMLHttpRequest;xhr.open(method,uri,!0),xhr.onload=()=>300>xhr.status&&200<=xhr.status?res(xhr.response):err(xhr.status+' '+xhr.statusText),xhr.onerror=err,xhr.send()}),type:value=>Object.prototype.toString.call(value).match(/\[object (.+)\]/i)[1]});class Process{constructor(image='',argv=[]){this.image=image,this.argv=argv,this.fds=[],this.currentDirectory='/',this.env={SHELL:'fsh',PATH:'./:/bin',HOME:'/home',TERM:'xterm-256color'};const jsonArgv=JSON.stringify(this.argv),expose=`const argv = ${jsonArgv}; const argc = argv.length;`;this.worker=spawnWorker([expose,'(function(){"use strict";function call(name,args=[]){const id=newID(5);return postMessage({type:"syscall",name,args,id}),new Promise((resolve,reject)=>{function listener(message){const msg=message.data;msg.id!==id||(removeEventListener("message",listener),"success"===msg.status?resolve(msg.result):reject(msg.reason))}addEventListener("message",listener)})}async function stat(path){return call("stat",[path])}function assertString(str){if("string"!=typeof str)throw new Error("Some argument is not a string")}function normalize(path){if(!path)return".";let isAbsolute=!1;0===path.indexOf("/")&&(isAbsolute=!0);const significant=(path.match(/[^/]+/g)||[]).filter(name=>"."!==name).reduce((pathArray,name)=>".."===name&&pathArray.length&&".."!==pathArray[pathArray.length-1]?pathArray.slice(0,-1):[...pathArray,name],[]);return isAbsolute?"/"+significant.join("/"):significant.join("/")}function parse(path=""){assertString(path);const[,root,parent,base,extention]=normalize(path).match(splitPathRe);return{absolute:!!root,parent,base,extention,name:base.slice(0,base.length-extention.length)}}async function readFile$1(path,mode="r"){const fd=await sys.open(path,mode),data=sys.readFile(fd);return sys.close(fd),data}async function writeFile$1(path,data="",mode="w"){const fd=await sys.open(path,mode);return sys.writeFile(fd,data),void sys.close(fd)}async function loadFile(path){const pathStat=await stat(path);if(pathStat.file)return self.eval((await readFile$1(path)));const pathJsStat=await stat(path+".js");if(pathJsStat.file)return self.eval((await readFile$1(path+".js")));const pathJsonStat=await stat(path+".json");if(pathJsonStat.file)return JSON.parse((await readFile$1(path+".json")));throw new Error("not found")}function wrap(style,str){const[open,close]=ansi[style];return`\\x1b[${open}m${str}\\x1b[${close}m`}function colorize(styles,str){if(styles instanceof Array)for(let i in styles)str=wrap(styles[i],str);else"string"==typeof styles&&(str=wrap(styles,str));return str}var _Mathround=Math.round;const newID=length=>[...Array(length).keys()].map(()=>_Mathround(Math.random()*65536)).map(n=>String.fromCharCode(n)).join("");var sys$1=Object.freeze({spawn:async function(image="",argv=[]){return call("spawn",[image,argv])},exec:async function(path,argv=[]){return call("exec",[path,argv])},exit:async function(){return call("exit",[])},exists:async function(path){return call("exists",[path])},stat:stat,open:async function(path,mode="r"){return call("open",[path,mode])},close:async function(fd){return call("close",[fd])},dup:async function(fd){return call("dup",[fd])},dup2:async function(fd1,fd2){return call("dup2",[fd1,fd2])},readFile:async function(fd){return call("readFile",[fd])},readDirectory:async function(fd){return call("readDirectory",[fd])},writeFile:async function(fd,data=""){return call("writeFile",[fd,data])},createDirectory:async function(path){return call("createDirectory",[path])},remove:async function(path){return call("remove",[path])},currentDirectory:async function(){return call("currentDirectory",[])},changeDirectory:async function(path="/home"){return call("changeDirectory",[path])},getenv:async function(key){return call("getenv",[key])},setenv:async function(key,value=""){return call("setenv",[key,value])}}),browser=function(){const ua=navigator.userAgent,matches=ua.match(/(vivaldi|opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*([\\d.]+)/i)||[];if(/trident/i.test(matches[1])){const tem=ua.match(/\\brv[ :]+([\\d.]+)/g)||"";return["IE",tem[1]]}if("Chrome"===matches[1]){const tem=ua.match(/\\b(OPR|Edge)\\/([\\d.]+)/);if(tem)return["Opera",tem[1]]}return matches[2]?{name:matches[1],version:matches[2]}:{name:navigator.appName,version:navigator.appVersion}}();const Just=x=>({map:f=>Just(f(x)),chain:f=>f(x),fold:()=>pass=>pass(x),toString:()=>`Just(${x})`}),Nothing={map:()=>Nothing,chain:()=>Nothing,fold:fail=>()=>fail(),toString:()=>`Nothing`},Ok=x=>({map:f=>Ok(f(x)),chain:f=>f(x),chainOk:f=>f(x),chainErr:()=>Ok(x),fold:()=>pass=>pass(x),toString:()=>`Ok(${x})`}),Err=x=>({map:()=>Err(x),chain:()=>Err(x),chainOk:()=>Err(x),chainErr:f=>f(x),fold:fail=>()=>fail(x),toString:()=>`Err(${x})`}),Task=run=>({run,map:f=>Task(err=>res=>run(err)(x=>res(f(x)))),runMap:f=>Task(err=>res=>run(err)(x=>f(x).run(err)(res))),log:()=>run(console.error)(console.log)});var fp=Object.freeze({Just:Just,Nothing:Nothing,propM:name=>obj=>name in obj?Just(obj[name]):Nothing,Ok:Ok,Err:Err,propR:name=>obj=>name in obj?Ok(obj[name]):Err(`${name} not in ${JSON.stringify(obj)}`),Task:Task});const splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;var path=Object.freeze({normalize:normalize,parse:parse,parentname:function(path=""){const parsed=parse(path);return parsed.absolute?"/"+parsed.parent:parsed.parent},basename:function(path="",extension=""){const basename=parse(path).base,indexOf=basename.indexOf(extension);return indexOf&&indexOf+extension.length===basename.length?basename.slice(0,indexOf):basename},chop:path=>normalize(path).match(/[^/]+/g)||[]});var fs=Object.freeze({readFile:readFile$1,writeFile:writeFile$1,appendFile:async function(path,data="",mode="a"){const fd=await sys.open(path,mode);return sys.write(fd,data),void sys.close(fd)}}),stdin=Object.freeze({read:async function(){return readFile$1("/dev/console")}}),stdout=Object.freeze({write:async function(str){return writeFile$1("/dev/console",str,"r+")}});var process$1={stdin,stdout,stderr:{}};const esc="\\x1B",beep="\\x07";var control=Object.freeze({cursor:{move:{to:(x=1,y=1)=>esc+"["+x+";"+y+"H",up:(n=1)=>esc+"["+n+"A",down:(n=1)=>esc+"["+n+"B",right:(n=1)=>esc+"["+n+"C",left:(n=1)=>esc+"["+n+"D",nextLine:()=>esc+"[E",prevLine:()=>esc+"[F",leftMost:()=>esc+"[G"},hide:()=>esc+"[?25l",show:()=>esc+"[?25h",shape:{block:()=>esc+"]50;CursorShape=0"+beep,bar:()=>esc+"]50;CursorShape=1"+beep,underscore:()=>esc+"50;CursorShape=2"+beep},savePosition:()=>esc+"[s",restorePosition:()=>esc+"[u"},line:{eraseEnd:()=>esc+"[K",eraseStart:()=>esc+"[1K",erase:()=>esc+"[2K"},screen:{eraseDown:()=>esc+"[J",eraseUp:()=>esc+"[1J",erase:()=>esc+"[2J",clear:()=>esc+"c",scrollUp:(n=1)=>esc+"["+n+"S",scrollDown:(n=1)=>esc+"["+n+"T"},misc:{beep:()=>beep,setTitle:str=>esc+"]0;"+str+beep}}),ansi={reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29],black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],grey:[90,39],brightRed:[91,39],brightGreen:[92,39],brightYellow:[93,39],brightBlue:[94,39],brightMagenta:[95,39],brightCyan:[96,39],brightWhite:[97,39],bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgGray:[100,49],bgGrey:[100,49],bgBrightRed:[101,49],bgBrightGreen:[102,49],bgBrightYellow:[103,49],bgBrightBlue:[104,49],bgBrightMagenta:[105,49],bgBrightCyan:[106,49],bgBrightWhite:[107,49]};const info=colorize("blue","\\u2139"),success=colorize("green","\\u2714"),warning=colorize("yellow","\\u26A0"),error=colorize("red","\\u2716"),star=colorize("brightYellow","\\u2605"),radioOn=colorize("green","\\u25C9"),radioOff=colorize("red","\\u25EF"),checkboxOn=colorize("green","\\u2612"),checkboxOff=colorize("red","\\u2610");var symbols=Object.freeze({info:info,success:success,warning:warning,error:error,star:star,radioOn:radioOn,radioOff:radioOff,checkboxOn:checkboxOn,checkboxOff:checkboxOff,arrowUp:"\\u2191",arrowDown:"\\u2193",arrowLeft:"\\u2190",arrowRight:"\\u2192",line:"\\u2500",play:"\\u25B6",pointer:"\\u276F",pointerSmall:"\\u203A",square:"\\u2587",squareSmall:"\\u25FC",bullet:"\\u25CF"});var spinners=Object.freeze({line:{fps:8,frames:["-","\\\\","|","/"]},dots:{fps:12.5,frames:["\\u280B","\\u2819","\\u2839","\\u2838","\\u283C","\\u2834","\\u2826","\\u2827","\\u2807","\\u280F"]},scrolling:{fps:5,frames:[".  ",".. ","..."," ..","  .","   "]},scrolling2:{fps:2.5,frames:[".  ",".. ","...","   "]},star:{fps:14,frames:["\\u2736","\\u2738","\\u2739","\\u273A","\\u2739","\\u2737"]},ball:{fps:8,frames:["\\u2801","\\u2802","\\u2804","\\u2802"]},triangle:{fps:15,frames:["\\u25E2","\\u25E3","\\u25E4","\\u25E5"]},circle:{fps:15,frames:["\\u25D0","\\u25D3","\\u25D1","\\u25D2"]},bounce:{fps:12.5,frames:["( \\u25CF    )","(  \\u25CF   )","(   \\u25CF  )","(    \\u25CF )","(     \\u25CF)","(    \\u25CF )","(   \\u25CF  )","(  \\u25CF   )","( \\u25CF    )","(\\u25CF     )"]},clock:{fps:10,frames:["\\uD83D\\uDD50 ","\\uD83D\\uDD51 ","\\uD83D\\uDD52 ","\\uD83D\\uDD53 ","\\uD83D\\uDD54 ","\\uD83D\\uDD55 ","\\uD83D\\uDD56 ","\\uD83D\\uDD57 ","\\uD83D\\uDD58 ","\\uD83D\\uDD59 ","\\uD83D\\uDD5A "]},pong:{fps:12.5,frames:["\\u2590\\u2802       \\u258C","\\u2590\\u2808       \\u258C","\\u2590 \\u2802      \\u258C","\\u2590 \\u2820      \\u258C","\\u2590  \\u2840     \\u258C","\\u2590  \\u2820     \\u258C","\\u2590   \\u2802    \\u258C","\\u2590   \\u2808    \\u258C","\\u2590    \\u2802   \\u258C","\\u2590    \\u2820   \\u258C","\\u2590     \\u2840  \\u258C","\\u2590     \\u2820  \\u258C","\\u2590      \\u2802 \\u258C","\\u2590      \\u2808 \\u258C","\\u2590       \\u2802\\u258C","\\u2590       \\u2820\\u258C","\\u2590       \\u2840\\u258C","\\u2590      \\u2820 \\u258C","\\u2590      \\u2802 \\u258C","\\u2590     \\u2808  \\u258C","\\u2590     \\u2802  \\u258C","\\u2590    \\u2820   \\u258C","\\u2590    \\u2840   \\u258C","\\u2590   \\u2820    \\u258C","\\u2590   \\u2802    \\u258C","\\u2590  \\u2808     \\u258C","\\u2590  \\u2802     \\u258C","\\u2590 \\u2820      \\u258C","\\u2590 \\u2840      \\u258C","\\u2590\\u2820       \\u258C"]}});Object.assign(self,{sys:sys$1,browser,fp,path,http:(uri,method="GET")=>Task(err=>res=>{const xhr=new XMLHttpRequest;xhr.open(method,uri,!0),xhr.onload=()=>300>xhr.status&&200<=xhr.status?res(xhr.response):err(xhr.status+" "+xhr.statusText),xhr.onerror=err,xhr.send()}),fs,process:process$1,require:requirePath=>loadFile(requirePath).catch(()=>loadFile(requirePath+"/index")),cli:{ArgParser:class{constructor(options){this.options=options||{}}parse(argv=process.argv){}},control,colorize,symbols,Spinner:class{constructor(name="circle"){const spinner=spinners[name];this.frames=spinner.frames,this.index=0,this.interval=_Mathround(1e3/spinner.fps),this.setIntervalIndex=null}next(){this.index++;const realIndex=(this.index-1)%this.frames.length;return this.frames[realIndex]}start(outputFunction){outputFunction=outputFunction||(str=>process.stdout.write(str)),this.setIntervalIndex=setInterval(()=>{let frame=this.next(),clearFrame=frame.replace(/./g,"\\b");outputFunction(clearFrame),outputFunction(frame)},this.interval)}stop(){clearInterval(this.setIntervalIndex)}}}}),self.print=(...args)=>process$1.stdout.write(args.join(" ")),self.println=(...args)=>process$1.stdout.write(args.join(" ")+"\\n"),"undefined"==typeof CustomEvent&&(self.CustomEvent=class extends Event{constructor(name,obj){super(name),Object.assign(this,obj)}}),addEventListener("message",message=>{const{type:type$1,name,detail}=message.data;if("event"===type$1&&name){const event=new CustomEvent(name,{detail});dispatchEvent(event)}})})();',image].join('\n\n')),this.worker.addEventListener('message',this.messageHandler.bind(this))}messageHandler(message){const msg=message.data;if('syscall'===msg.type&&msg.name in sys)void 0!==msg.id&&msg.args instanceof Array&&(history[msg.id]={time:new Date,call:`${msg.name}(${msg.args.map(JSON.stringify).join(', ')})`},sys[msg.name](this,msg.id,msg.args));else if('event'===msg.type&&msg.name&&msg.detail){const event=new CustomEvent(msg.name,{detail:msg.detail});dispatchEvent(event)}else{const error={status:'error',reason:'Invalid request - Rejected by the message handler',id:msg.id};this.worker.postMessage(error)}}exists(path){return fs.resolve(path).fold(()=>!1)(()=>!0)}open(path,mode='r'){let newFd=this.fds.indexOf(null);-1===newFd&&(newFd=this.fds.length);const fd=FileDescriptor(path,mode);return fd.inode.chain(function(x){return this.fds[newFd]=x,Ok(newFd)}.bind(this))}close(fd){return this.fds[fd]?Ok(this.fds[fd]=null):Err$1('File descriptor does not exist')}dup(fd){return this.fds[fd]?Ok(this.fds.push(this.fds[fd])-1):Err$1('File descriptor does not exist')}dup2(fd1,fd2){return this.fds[fd1]?Ok((this.fds[fd2]=this.fds[fd1],fd1)):Err$1('File descriptor does not exist')}}const init=new Process('(function(){"use strict";sys.exec("/bin/jsh")})();');var processTable=new class{constructor(init){if(!init instanceof Process)throw new Error('Init process is invalid');this.list=[init]}add(process){return this.list.push(process)-1}emit(name,detail,pids=Object.keys(this.list)){pids.map(pid=>this.list[pid].worker.postMessage({type:'event',name,detail}))}}(init);class Node{constructor(data){this.data=data,this.prev=null,this.next=null}}class DoublyLinkedList{constructor(){this.first=null,this.last=null,this.length=0}unshift(data){if(!this.first)this.first=new Node(data),this.last=this.first;else{const newFirst=new Node(data);newFirst.next=this.first,this.first.prev=newFirst,this.first=newFirst}return this.length++,data}push(data){if(!this.last)this.last=new Node(data),this.first=this.last;else{const newLast=new Node(data);newLast.prev=this.last,this.last.next=newLast,this.last=newLast}return this.length++,data}add(i,data){if(0>i||i>this.length)return null;switch(i){case 0:return this.unshift(data);break;case this.length:return this.push(data);break;default:const current=this.nodeAt(i),beforeNodeToAdd=current.prev,nodeToAdd=new Node(data),afterNodeToAdd=current;return nodeToAdd.next=afterNodeToAdd,nodeToAdd.prev=beforeNodeToAdd,beforeNodeToAdd.next=nodeToAdd,afterNodeToAdd.prev=nodeToAdd,this.length++,data;}}shift(){const oldFirst=this.first;return this.first&&(this.last===this.first?(this.first=null,this.last=null):(this.first=this.first.next,this.first.prev=null)),this.length--,oldFirst.data}pop(){const oldLast=this.last;return this.last&&(this.last===this.first?(this.first=null,this.last=null):(this.last=this.last.prev,this.last.next=null)),this.length--,oldLast.data}remove(i){if(0===this.length||0>i||i>this.length-1)return null;switch(i){case 0:return this.shift();break;case this.length-1:return this.pop();break;default:const current=this.nodeAt(i),beforeNodeToDelete=current.prev,afterNodeToDelete=current.next;return beforeNodeToDelete.next=afterNodeToDelete,afterNodeToDelete.prev=beforeNodeToDelete,this.length--,current.data;}}nodeAt(i){if(0>this.length/2-(i+1)){let current=this.last;for(let count=0;count<this.length-i-1;count++)current=current.prev;return current}let current=this.first;for(let count=0;count<i;count++)current=current.next;return current}each(func){for(let current=this.first;current;)func(current.data),current=current.next}toString(){const array=[];return this.each(val=>array.push(val)),array.join('')}}class LineEditor{constructor(write,emit){this.write=write||async function(){},this.emit=emit||function(){},this.buffer=new DoublyLinkedList,this.history=[],this.historyIndex=0,this.cursorIndex=0,this.readable=''}read(){const str=this.readable;return this.readable='',str}handle(key){'\x7F'===key||'\b'===key?this.backSpace():'\r'===key?this.enter():'\x1B[A'===key||'\x1B[B'===key||'\x1B[C'===key||'\x1B[D'===key?this.arrow(key):(this.buffer.add(this.cursorIndex,key),this.update(this.buffer.length-1,this.cursorIndex+1))}saveBuffer(){const bufferCopy=Object.assign(new DoublyLinkedList,this.buffer);this.history[this.historyIndex]=bufferCopy}cursorToStart(){const backspaces=Array(this.cursorIndex+1).join('\b');this.write(backspaces),this.cursorIndex=0}update(oldBufferLength,newCursorIndex){this.cursorToStart();const spaces=Array(oldBufferLength+1).join(' ');this.write(spaces),this.write(spaces.replace(/ /g,'\b')),this.write(this.buffer.toString());const backspaces=Array(this.buffer.length-newCursorIndex+1).join('\b');this.write(backspaces),this.cursorIndex=newCursorIndex}backSpace(){0<this.cursorIndex&&(this.buffer.remove(this.cursorIndex-1),this.update(this.buffer.length+1,this.cursorIndex-1))}enter(){this.readable+=this.buffer.toString()+'\n',this.emit('consoleInput',{buffered:!0}),this.saveBuffer(),this.buffer=new DoublyLinkedList,this.write('\n'),this.historyIndex++,this.cursorIndex=0}arrow(key){const detail={};switch(key){case'\x1B[A':if(detail.arrowUp=!0,0!==this.historyIndex){const oldBufferLength=this.buffer.length;this.saveBuffer(),this.historyIndex--,this.buffer=this.history[this.historyIndex],this.update(oldBufferLength,this.buffer.length)}break;case'\x1B[B':if(detail.arrowDown=!0,this.historyIndex!==this.history.length-1){const oldBufferLength=this.buffer.length;this.saveBuffer(),this.historyIndex++,this.buffer=this.history[this.historyIndex],this.update(oldBufferLength,this.buffer.length)}break;case'\x1B[C':detail.arrowRight=!0,this.cursorIndex===this.buffer.length||(this.cursorIndex++,this.write(key));break;case'\x1B[D':detail.arrowLeft=!0,0===this.cursorIndex||(this.cursorIndex--,this.write(key));break;default:return;}this.emit('consoleInput',detail)}}var console$2=new class{constructor(config={}){this.lineEditor=new LineEditor(this.write.bind(this),processTable.emit.bind(processTable)),this.config={buffer:!0},Object.assign(this.config,config)}read(){return this.lineEditor.read()}writeRaw(str){console.warn(`Unhandled console write: ${str}`)}write(contents){return this.writeRaw(contents.replace(/\n/g,'\r\n'))}handle(key){this.config.buffer?this.lineEditor.handle(key):processTable.emit('consoleInput',{raw:!0})}};const inode=new class{constructor(config={}){this.file=!0,this.directory=!1,this.children=void 0,this.executable=!1,this.raw=console$2,Object.assign(this,config)}readFile(){return Ok(this.raw.read())}writeFile(contents){return Ok(this.raw.write(contents))}appendFile(contents){return this.writeFile(contents)}truncateFile(){return Ok('')}readDirectory(){return Err('Not a directory')}},devices=new OFS;devices.addInode(['console'],inode);const root=new OFS;root.createDirectory(['bin']),root.createDirectory(['dev']),root.createDirectory(['dev','dom']),root.createDirectory(['home']),root.createDirectory(['log']),root.createDirectory(['tmp']),root.addInode(['bin','fsh'],new Inode({file:!0,executable:!0,raw:'(function(){"use strict";function tokenizeLine(line=""){const tokens=line.match(/(["\'])(?:\\\\|.)+\\1|((?:[^\\\\\\s]|\\\\.)*)/g).filter(String);for(let token,i=0;i<tokens.length;i++)token=tokens[i],tokens[i]=token.replace(/\\\\(?=.)/g,""),token.match(/^["\'].+(\\1)$/m)&&(tokens[i]=/^(["\'])(.+)(\\1)$/gm.exec(token)[2]);return tokens}function lex(input=""){const allTokens=[],lines=input.match(/(\\\\;|[^;])+/g);for(let tokens,i=0;i<lines.length;i++)tokens=tokenizeLine(lines[i]),allTokens.push(tokens);return allTokens}function parseCommand(tokens){return{type:"simple",argv:tokens,name:tokens[0]}}function parse(input=""){const AST={type:"script",commands:[]},commands=lex(input);for(let i in commands){const parsed=parseCommand(commands[i]);AST.commands[i]=parsed}return AST}async function which(name){const toCheck=await sys.getenv("PATH").then(PATH=>PATH.split(":").map(path=>path+"/"+name));for(let i in toCheck){const path=toCheck[i];try{const{file,executable}=await sys.stat(path);if(file&&executable)return path}catch(e){}}}var prompt=(str,color="gray")=>sys.currentDirectory().then(cwd=>cli.colorize(color,str||`faux:${cwd} # `)).then(print),evaluate=str=>parse(str).commands.map(command=>which(command.name).then(execPath=>sys.exec(execPath,command.argv)).then(()=>prompt()).catch(console.warn));addEventListener("consoleInput",({detail})=>detail.buffered?process.stdin.read().then(evaluate):null),prompt()})();'})),root.addInode(['bin','jsh'],new Inode({file:!0,executable:!0,raw:'(function(){"use strict";async function prompt(str="jsh> ",color="gray"){const prompt=cli.colorize(color,str);return await print(prompt)}function serializeFunction(value,currentDepth=0){switch(currentDepth){case 0:return value+"";break;case 1:return value.name?`[Function: ${value.name}]`:"[Function]";break;case 2:default:return"[Function]";}}function serialize(value,depthLimit=5,currentDepth=0){if(currentDepth>=depthLimit)return"[...]";let ret;switch(type(value)){case"Object":ret={},Object.keys(value).forEach(key=>{ret[key]=serialize(value[key],depthLimit,currentDepth+1)});break;case"Array":for(let i in ret=[],value)ret[i]=serialize(value[i],depthLimit,currentDepth+1);break;case"Function":return serializeFunction(value,currentDepth);break;case"Symbol":return value.toString();break;default:return value.toString();}return 0===currentDepth?JSON.stringify(ret,null,2):ret}async function evaluate(str){let formatted="";try{const result=self.eval(str),serialized=serialize((await result));formatted=`${cli.colorize("green",serialized)}`,result instanceof Promise&&(formatted=`${cli.colorize("gray","(Promise) ->")} ${cli.colorize("green",serialized)}`)}catch(err){formatted=cli.colorize("red",err)}return await println(formatted),await prompt()}const type=value=>Object.prototype.toString.call(value).match(/\\[object (.+)\\]/i)[1];addEventListener("consoleInput",({detail})=>detail.buffered?process.stdin.read().then(evaluate):null),println(`Welcome to Faux\'s ${cli.colorize("bold","J")}avascript ${cli.colorize("bold","SH")}ell!\\n`).then(()=>prompt())})();'})),root.addInode(['bin','ls'],new Inode({file:!0,executable:!0,raw:'var ls=function(){"use strict";const ls$1=([name,...args])=>sys.open(args[0]||"./").then(fd=>sys.readDirectory(fd)).then(contents=>contents.join(" ")).then(println).catch(err=>println(cli.colorize("red",err.toString())));return ls$1(argv).then(()=>sys.exit()),ls$1}();'}));const fs=new class{constructor(rootFS){this.mounts={"/":rootFS}}mount(fs,mountPoint){const normalized=normalize(mountPoint);this.resolve(normalized).chain(propR('directory')).map(isDirectory=>isDirectory?Ok(this.mounts[normalized]=fs):Err$1('No directory to mount to'))}unmount(mountPoint){const normalized=normalize(mountPoint);return Ok(delete this.mounts[normalized])}getPathInfo(path){const normalized=normalize(path),mountPoint=Object.keys(this.mounts).filter(mount=>normalized.startsWith(mount)).sort((a,b)=>chop(b).length-chop(a).length)[0],localFsPath=normalized.substring(mountPoint.length)||'/';return{localFs:this.mounts[mountPoint],localFsPathArray:chop(localFsPath)}}resolve(path){const{localFs,localFsPathArray}=this.getPathInfo(path);return localFs.resolve(localFsPathArray)}createFile(path){const{localFs,localFsPathArray}=this.getPathInfo(path);return localFs.createFile(localFsPathArray)}createDirectory(path){const{localFs,localFsPathArray}=this.getPathInfo(path);return localFs.createDirectory(localFsPathArray)}remove(path){const{localFs,localFsPathArray}=this.getPathInfo(path);return localFs.remove(localFsPathArray)}}(root);fs.mount(new class{resolve(pathArray){const selector=0===pathArray.length?'*':(' '+pathArray.join(' > ')).replace(/ (\d)/g,' :nth-child($1)'),element=document.querySelector(selector);return element?Ok(new Inode$1({raw:element})):Err$1('Failed to resolve')}createFile(pathArray){const parent=pathArray.slice(0,-1),name=pathArray.slice(-1)[0],element=document.createElement(name);return this.resolve(parent).chain(propR('raw')).chain(parentEl=>parentEl.appendChild(element)).map(()=>new Inode$1({raw:element}))}createDirectory(pathArray){return this.createFile(pathArray)}remove(pathArray){return this.resolve(pathArray).chain(propR('raw')).chain(element=>element.remove())}},'/dev/dom'),fs.mount(devices,'/dev');var browser=function(){const ua=navigator.userAgent,matches=ua.match(/(vivaldi|opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*([\d.]+)/i)||[];if(/trident/i.test(matches[1])){const tem=ua.match(/\brv[ :]+([\d.]+)/g)||'';return['IE',tem[1]]}if('Chrome'===matches[1]){const tem=ua.match(/\b(OPR|Edge)\/([\d.]+)/);if(tem)return['Opera',tem[1]]}return matches[2]?{name:matches[1],version:matches[2]}:{name:navigator.appName,version:navigator.appVersion}}();return{fs,sys,proc:processTable,utils,console:console$2,browser,history,version:'0.0.4'}});